{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport { Observable } from 'rxjs/internal/Observable';\nimport { switchMap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport let StepperService = /*#__PURE__*/(() => {\n  class StepperService {\n    constructor(steps) {\n      this.steps = steps;\n      this.steps$ = new BehaviorSubject(this.steps);\n\n      if (!steps || steps.length <= 0) {\n        throw new Error('Steps is not defined.');\n      }\n\n      this.set(1);\n    }\n\n    ngOnDestroy() {\n      this.sub.unsubscribe();\n    }\n\n    set(id) {\n      if (!this.isValidId(id)) {\n        return;\n      }\n\n      this.sub = this.useRuleForComplete(id, this.steps).pipe(switchMap(steps => this.useRuleForActivate(id, steps))).subscribe(steps => {\n        this.steps = steps;\n        this.steps$.next(this.steps);\n      });\n    }\n\n    reset() {\n      this.steps = this.steps.map(s => {\n        s.done = false;\n        s.active = false;\n        return s;\n      });\n      this.useRuleForActivate(1, this.steps).subscribe(steps => {\n        this.steps = steps;\n        this.steps$.next(this.steps);\n      });\n    }\n\n    isValidId(id) {\n      return !isNaN(id) && id > 0 && this.steps && this.steps.length > 0;\n    }\n\n    useRuleForComplete(id, list) {\n      const steps = list.map(s => {\n        if (s.active || s.id < id) {\n          s.done = true;\n          s.active = false;\n        }\n\n        return s;\n      });\n      return new Observable(sender => {\n        sender.next(steps);\n        sender.complete();\n      });\n    }\n\n    useRuleForActivate(id, list) {\n      const steps = list.map(s => {\n        if (s.id === id) {\n          s.active = true;\n        }\n\n        return s;\n      });\n      return new Observable(sender => {\n        sender.next(steps);\n        sender.complete();\n      });\n    }\n\n  }\n\n  StepperService.ɵfac = function StepperService_Factory(t) {\n    return new (t || StepperService)(i0.ɵɵinject('steps'));\n  };\n\n  StepperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StepperService,\n    factory: StepperService.ɵfac\n  });\n  return StepperService;\n})();","map":null,"metadata":{},"sourceType":"module"}